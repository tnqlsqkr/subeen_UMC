generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id                  BigInt              @id @default(autoincrement())
  name                String              @db.VarChar(20)
  gender              String              @db.VarChar(20)
  address             String              @db.VarChar(40)
  specAddress        String?             @map("spec_address") @db.VarChar(40)
  email               String              @unique(map: "email") @db.VarChar(50)
  phoneNumber         String              @map("phoneNumber") @db.VarChar(15)
  birth               DateTime            @db.Date

  userFavorCategories UserFavorCategory[]

  reviews           Review[]            @relation("MemberReviews")
  @@map("member")
}

model FoodCategory {
  id                  BigInt              @id @default(autoincrement())
  name                String              @db.VarChar(15)
  createdAt          DateTime?           @db.DateTime(6) @map("created_at")
  updatedAt          DateTime?           @db.DateTime(6) @map("updated_at")
  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
    id          BigInt        @id @default(autoincrement())
    memberId    BigInt        @map("member_id")
    categoryId  BigInt        @map("category_id")
    createdAt   DateTime?     @default(now()) @db.DateTime(6) @map("created_at")
    updatedAt   DateTime?     @default(now()) @db.DateTime(6) @map("updated_at")

    member       Member        @relation(fields: [memberId], references: [id])
    foodCategory FoodCategory  @relation(fields: [categoryId], references: [id])

    @@map("member_prefer")
    @@index([memberId], name: "member_id")
    @@index([categoryId], name: "category_id")
}

model Store {
    id         BigInt     @id @default(autoincrement())
    name       String?    @db.VarChar(50)
    address    String?    @db.VarChar(50)
    score      Float?
    createdAt  DateTime?  @default(now()) @db.DateTime(6) @map("created_at")
    updatedAt  DateTime?  @default(now()) @db.DateTime(6) @map("updated_at")

    reviews           Review[]            @relation("StoreReviews")
    missions          Mission[]           @relation("StoreMissions")
    @@map("store")
}

model Review {
    id       BigInt  @id @default(autoincrement())
    memberId BigInt? 
    storeId  BigInt? 
    body     String? @db.Text
    score    Float?

    member   Member? @relation("MemberReviews", fields: [memberId], references: [id])
    store    Store?  @relation("StoreReviews", fields: [storeId], references: [id])

    @@map("review")
    @@index([storeId])
}

model Mission {
    id       BigInt  @id @default(autoincrement())
    storeId  BigInt? @map("store_id")
    reward   Int?
    deadline  DateTime? @db.DateTime(6)
    missionSpec  String? @db.Text @map("mission_spec")
    createdAt  DateTime? @default(now()) @db.DateTime(6) @map("created_at")
    updatedAt   DateTime?  @default(now()) @db.DateTime(6)@map("updated_at")

    store    Store?  @relation(fields: [storeId], references: [id], name : "StoreMissions")

    @@map("mission")
    @@index([storeId])
}

model Region {
  id          BigInt    @id @default(autoincrement())
  name        String?   @db.VarChar(20)
  createdAt  DateTime? @default(now()) @db.DateTime(6) @map("created_at")
  updatedAt  DateTime? @default(now()) @db.DateTime(6) @map("updated_at")

  @@map("region")
}