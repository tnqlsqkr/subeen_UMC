generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id                  BigInt              @id @default(autoincrement())
  name                String              @db.VarChar(20)
  gender              String              @db.VarChar(20)
  address             String              @db.VarChar(40)
  specAddress         String?             @map("spec_address") @db.VarChar(40)
  email               String              @unique(map: "email") @db.VarChar(50)
  password            String?             @db.VarChar(60)
  phoneNumber         String              @map("phoneNumber") @db.VarChar(15)
  birth               DateTime            @db.Date
  userFavorCategories UserFavorCategory[]
  reviews             Review[]            @relation("MemberReviews")

  memberMissions MemberMission[] 
  @@map("member")
}

model FoodCategory {
  id                  BigInt              @id @default(autoincrement())
  name                String              @db.VarChar(15)
  createdAt           DateTime?           @map("created_at") @db.DateTime(6)
  updatedAt           DateTime?           @map("updated_at") @db.DateTime(6)
  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id           BigInt       @id @default(autoincrement())
  memberId     BigInt       @map("member_id")
  categoryId   BigInt       @map("category_id")
  createdAt    DateTime?    @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt    DateTime?    @default(now()) @map("updated_at") @db.DateTime(6)
  foodCategory FoodCategory @relation(fields: [categoryId], references: [id])
  member       Member       @relation(fields: [memberId], references: [id])

  @@index([memberId], map: "member_id")
  @@index([categoryId], map: "category_id")
  @@map("member_prefer")
}

model Store {
  id        BigInt    @id @default(autoincrement())
  name      String?   @db.VarChar(50)
  address   String?   @db.VarChar(50)
  score     Float?
  regionId  BigInt?   @map("region_id")
  region    Region?   @relation("StoreRegion", fields: [regionId], references: [id])
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.DateTime(6)
  missions  Mission[] @relation("StoreMissions")
  reviews   Review[]  @relation("StoreReviews")

  @@index([regionId])
  @@map("store")
}

model Review {
  id       BigInt  @id @default(autoincrement())
  memberId BigInt?
  storeId  BigInt?
  body     String? @db.Text
  score    Float?
  member   Member? @relation("MemberReviews", fields: [memberId], references: [id])
  store    Store?  @relation("StoreReviews", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([memberId], map: "review_memberId_fkey")
  @@map("review")
}

model Mission {
  id          BigInt    @id @default(autoincrement())
  storeId     BigInt?   @map("store_id")
  reward      Int?
  deadline    DateTime? @db.DateTime(6)
  missionSpec String?   @map("mission_spec") @db.Text
  createdAt   DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt   DateTime? @default(now()) @map("updated_at") @db.DateTime(6)
  store       Store?    @relation("StoreMissions", fields: [storeId], references: [id])

  @@index([storeId])
  memberMissions MemberMission[] 
  @@map("mission")
}

model Region {
  id        BigInt    @id @default(autoincrement())
  name      String?   @db.VarChar(20)
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.DateTime(6)
  stores    Store[]   @relation("StoreRegion")

  @@map("region")
}

model MemberMission {
    id        BigInt    @id @default(autoincrement())
    memberId  BigInt?   @map("member_id")
    missionId BigInt?   @map("mission_id")
    status    String?   @db.VarChar(15)
    createdAt DateTime? @map("created_at") @db.DateTime(6)
    updatedAt DateTime? @map("updated_at") @db.DateTime(6)
    
    member    Member?   @relation(fields: [memberId], references: [id])
    mission   Mission?  @relation(fields: [missionId], references: [id])

    @@index([memberId])
    @@index([missionId])
    @@map("member_mission")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(512)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}